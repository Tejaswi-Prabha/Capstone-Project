from fastapi import FastAPI, Query
import requests
import pandas as pd
import talib
import smtplib
import sqlite3
from pydantic import BaseModel
from typing import List
from email.mime.text import MIMEText

# Initialize FastAPI app
app = FastAPI()

# Alpha Vantage API Key (Replace with your own key)
API_KEY = "YOUR_ALPHA_VANTAGE_API_KEY"
BASE_URL = "https://www.alphavantage.co/query"

# SQLite Database Connection
def init_db():
    conn = sqlite3.connect("stocks.db")
    cursor = conn.cursor()
# 1. Stocks Table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS stocks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            ticker TEXT UNIQUE NOT NULL,
            company_name TEXT NOT NULL,
            sector TEXT,
            industry TEXT,
            exchange TEXT,
            market_cap FLOAT
        )
    ''')

    # 2. Stock Prices Table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS stock_prices (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            stock_id INTEGER,
            date DATE NOT NULL,
            open_price FLOAT,
            high_price FLOAT,
            low_price FLOAT,
            close_price FLOAT,
            volume INTEGER,
            FOREIGN KEY (stock_id) REFERENCES stocks(id)
        )
    ''')

    # 3. Financials Table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS financials (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            stock_id INTEGER,
            report_date DATE NOT NULL,
            revenue FLOAT,
            net_income FLOAT,
            eps FLOAT,
            pe_ratio FLOAT,
            debt FLOAT,
            cash FLOAT,
            assets FLOAT,
            liabilities FLOAT,
            FOREIGN KEY (stock_id) REFERENCES stocks(id)
        )
    ''')

    # 4. Transactions Table (for user portfolio management)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            stock_id INTEGER,
            transaction_type TEXT CHECK(transaction_type IN ('BUY', 'SELL')),
            quantity INTEGER,
            price FLOAT,
            transaction_date DATE NOT NULL,
            FOREIGN KEY (user_id) REFERENCES users(id),
            FOREIGN KEY (stock_id) REFERENCES stocks(id)
        )
    ''')

    # 5. Users Table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            email TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL
        )
    ''')

    # 6. Watchlist Table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS watchlists (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            stock_id INTEGER,
            FOREIGN KEY (user_id) REFERENCES users(id),
            FOREIGN KEY (stock_id) REFERENCES stocks(id)
        )
    ''')

    # 7. News Table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS news (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            stock_id INTEGER,
            headline TEXT,
            source TEXT,
            date DATE NOT NULL,
            url TEXT,
            FOREIGN KEY (stock_id) REFERENCES stocks(id)
        )
    ''')

    # 8. Market Indices Table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS market_indices (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            index_name TEXT UNIQUE NOT NULL,
            date DATE NOT NULL,
            open FLOAT,
            high FLOAT,
            low FLOAT,
            close FLOAT,
            volume INTEGER
        )
    ''')

    # 9. Dividends Table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS dividends (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            stock_id INTEGER,
            ex_dividend_date DATE NOT NULL,
            payment_date DATE NOT NULL,
            dividend_amount FLOAT,
            yield FLOAT,
            FOREIGN KEY (stock_id) REFERENCES stocks(id)
        )
    ''')

    # 10. Stock Filters Table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS stock_filters (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            pe_ratio_max FLOAT,
            revenue_growth_min FLOAT,
            net_profit_min FLOAT,
            industry TEXT
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# Define a model for stock screening criteria
class StockFilter(BaseModel):
    pe_ratio_max: float = None
    revenue_growth_min: float = None
    net_profit_min: float = None
    industry: str = None
    email: str = None

# Fetch stock price data
def get_stock_data(symbol: str, interval: str = "daily"):
    url = f"{BASE_URL}?function=TIME_SERIES_DAILY_ADJUSTED&symbol={symbol}&apikey={API_KEY}&outputsize=compact"
    response = requests.get(url).json()
    data = response.get("Time Series (Daily)", {})
    df = pd.DataFrame.from_dict(data, orient='index', dtype=float)
    df.index = pd.to_datetime(df.index)
    return df

# Compute technical indicators
def compute_indicators(df: pd.DataFrame):
    df['RSI'] = talib.RSI(df['4. close'], timeperiod=14)
    df['MACD'], df['MACD_signal'], _ = talib.MACD(df['4. close'], fastperiod=12, slowperiod=26, signalperiod=9)
    df['SMA_50'] = talib.SMA(df['4. close'], timeperiod=50)
    df['SMA_200'] = talib.SMA(df['4. close'], timeperiod=200)
    return df

# Email Notification
def send_email(email: str, subject: str, body: str):
    sender_email = "your_email@example.com"
    password = "your_email_password"
    msg = MIMEText(body)
    msg["Subject"] = subject
    msg["From"] = sender_email
    msg["To"] = email

    with smtplib.SMTP("smtp.gmail.com", 587) as server:
        server.starttls()
        server.login(sender_email, password)
        server.sendmail(sender_email, email, msg.as_string())

# Endpoint to fetch stock data and indicators
@app.get("/stock/{symbol}")
def stock_analysis(symbol: str):
    df = get_stock_data(symbol)
    df = compute_indicators(df)
    return df.tail(5).to_dict()

# Endpoint to filter stocks based on fundamental criteria
@app.post("/screen-stocks")
def screen_stocks(filters: StockFilter):
    conn = sqlite3.connect("stocks.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO stock_filters (pe_ratio_max, revenue_growth_min, net_profit_min, industry) VALUES (?, ?, ?, ?)",
                   (filters.pe_ratio_max, filters.revenue_growth_min, filters.net_profit_min, filters.industry))
    conn.commit()
    conn.close()
    
    send_email(filters.email, "Stock Screener Alert", "Stocks matching your criteria are available.")
    return {"message": "Stock screening based on filters", "filters": filters}
